module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  st_alu alu;
  test_rom aba_rom;
  check_rom alu_rom;
  sig i, j;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff a[16](.rst(rst));
    dff b[16](.rst(rst));
    dff alufn[6](.rst(rst));
    fsm mode(.clk(clk), .rst(rst)) = {MANUAL,AUTO};
    dff counter[6](#INIT(0));
    button_conditioner button_conditioner[5];
    edge_detector edge_detector[2](#RISE(1), #FALL(0));
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    button_conditioner.in = io_button[4:0];
    edge_detector.in = button_conditioner.out[4:3];
    
    led = 8b0;  // leds disabled
    
    usb_tx = usb_rx;          // loop serial port
    
    io_seg = 8b1; // 7 segment display disabled
    io_sel = 4hf;
    
    io_led = c{{c{5b0,alu.z,alu.v,alu.n},alu.out[15:8],alu.out[7:0]}};
    aba_rom.test_id = 5b0;
    alu_rom.test_id = 5b0;
    alu.a = a.q;
    alu.b = b.q;
    alu.alufn = alufn.q;
    
    case (mode.q) {
      mode.MANUAL : 
        
        // brick testing roms
        aba_rom.test_id = 5b0;
        alu_rom.test_id = 5b0;
        
        // feed register values to alu
        alu.a = a.q;
        alu.b = b.q;
        alu.alufn = alufn.q;
        
        // buttons [2:0] store 'a', 'b', and 'alufn' according to the dipswitches [1:0][7:0] 
        if (button_conditioner.out[0]){
           // store a 
           a.d = c{io_dip[1],io_dip[0]};
        }
    
        if (button_conditioner.out[1]){
           // store b 
          b.d = c{io_dip[1],io_dip[0]};
        }
    
        if (button_conditioner.out[2]){
          // store alufn
          alufn.d = io_dip[0][5:0];
        }
        
        // io_led [1:0] display the 16-bit output of the alu and io_led [2][2:0] displays z, v, and n from left to right
        io_led = c{{c{5b0,alu.z,alu.v,alu.n},alu.out[15:8],alu.out[7:0]}};
        
        // advance fsm to next state
        if (edge_detector.out[0]) {
           mode.d = mode.AUTO;
        }
      mode.AUTO :
      
        // feed counter registers into testing rom
        aba_rom.test_id = counter.q;
        alu_rom.test_id = counter.q;
        
        // feed rom values into alu
        alu.a = aba_rom.a;
        alu.b = aba_rom.b;
        alu.alufn = aba_rom.alufn;
        
        
        j = alu.out[0];
        // error on lsb switch
        if (io_dip[2][7]) {
           j = b1;
        }
        
        // alu output evaluation: i is 1 if output is correct, 0 if output does not match rom values
        i = &(~c{alu.out[15:1],j}^alu_rom.out) & (~alu.z^alu_rom.z) & (~alu.v^alu_rom.v) & (~alu.n^alu_rom.n);
        
        // io_led [1:0] display 16-bit alu output, io_led [2] displays 6-bit rom counter on 6 lsb and correct indicator on msb
        io_led = c{{c{i,b0,counter.q},alu.out[15:8],c{alu.out[7:1],j}}};
        
        // advance fsm back to manual mode if counter is 0, otherwise reset counter to 0
        if (edge_detector.out[0] & (!counter.q)) {
           mode.d = mode.MANUAL;
        }
        if (edge_detector.out[0] & counter.q) {
           counter.d = b000000;
        }
        
        // counter increment on right button press (io_button [4])
        if (edge_detector.out[1]) {
           counter.d = counter.q + 1;
        }

    }
  }
}