module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  st_alu alu;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff a[16](.rst(rst));
    dff b[16](.rst(rst));
    dff alufn[6](.rst(rst));
    button_conditioner button_conditioner[3];
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    button_conditioner.in = io_button[2:0];
    
    led = c{3b0, io_button};  // connect buttons to LEDs to see which button is pressed
    
    usb_tx = usb_rx;          // loop serial port
    
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4hf; // turn on rightmost digit, and leftmost digit
    
    alu.a = a.q;
    alu.b = b.q;
    alu.alufn = alufn.q;
    
    // ****** INPUT SETTING ****** //
    // a very crude way of testing the alu manually
    // TODO: change this to suit your needs
    // press button[0] to store 'a' value based on current dipswitches 
    // press button[1] to store 'b' value based on current dipswitches 
    // bit[24:17] of a,b always set to 0 for convenience 
    // press button[2] to store 'alufn' value based on io_dip[0][5:0] (6 rightmost dipswitch) 
    if (button_conditioner.out[0]){
       // store a 
       a.d = c{io_dip[1],io_dip[0]}; // set io_dip[2] to dictate MSB 8 bits
    }
    
    if (button_conditioner.out[1]){
       // store b 
      b.d = c{io_dip[1],io_dip[0]}; // set io_dip[2] to dictate MSB 8 bits
    }
    
    if (button_conditioner.out[2]){
      // store alufn
      alufn.d = io_dip[0][5:0];
    }

    // ****** OUTPUT SETTING ****** //
    // TODO: change this to suit your needs
    // io_led[0] shows the lowest 8 bit of ALU output at all times
    // io_led[1] shows the highest 8 bit of ALU output at all times
    // io_led[2][2:0] shows z,v,n at all times
    io_led = c{{c{5b0,alu.z,alu.v,alu.n},alu.out[15:8],alu.out[7:0]}};   
  }
}