module ctrl_test (
    input clk,  // clock
    input rst,  // reset
    input left,
    input right,
    input b_data[16],
    input tick,
    
    output asel[2],
    output bsel[2],
    output alufn[6],
    output prng,
    output wsel,
    output we,
    output ra[4],
    output rb[4],
    output wr[4],
    output debu[2]
  ) {
    .clk(clk){
    dff debug[2];
fsm game_fsm={
        START, 
        IDLE, 
        CHECK_PC_POS_0, 
        CHECK_PC_POS_4,
        CHECK_PC_POS_LESS_4_L,
        CHECK_PC_POS_LESS_4_R,
        CHECK_PC_POS_8,
        BRANCH_CMP_REGISTER_L_1,
        BRANCH_CMP_REGISTER_L_2,
        BRANCH_CMP_REGISTER_R_1,
        BRANCH_CMP_REGISTER_R_2,
        BRANCH_CMP_REGISTER_R_3,
        BRANCH_CMP_REGISTER_INCREMENT,
        BRANCH_CMP_REGISTER_GAMEOVER,
        INCREMENT_PC_POS, 
        DECREMENT_PC_POS,
        RNG_1,
        RNG_2,
        RNG_3,
        RNG_4,
        INCREMENT_SCORE,
        CHECK_SCORE_8,
        SET_PC_POS, 
        BRANCH_PLAYER_POS_REGISTER,
        CHECK_TENT_1_EX,
        CHECK_TENT_2_EX,
        CHECK_TENT_3_EX,
        CHECK_TENT_4_EX,
        CHECK_RN_REG_1,
        CHECK_RN_REG_2,
        CHECK_RN_REG_3,
        CHECK_RN_REG_4,
        CHECK_TENT_1_LEN_4,
        CHECK_TENT_2_LEN_4,
        CHECK_TENT_3_LEN_4,
        CHECK_TENT_4_LEN_4,
        CHECK_TENT_1_LEN_0,
        CHECK_1_LESS_0,
        INCREMENT_TENT_1_LEN,
        DECREMENT_TENT_1_LEN,
        SET_TENT_1_EX_4,
        SET_TENT_1_EX_0,
        CHECK_TENT_2_LEN_0,
        CHECK_2_LESS_0, 
        INCREMENT_TENT_2_LEN,
        DECREMENT_TENT_2_LEN,
        SET_TENT_2_EX_4,
        SET_TENT_2_EX_0,
        CHECK_TENT_3_LEN_0,
        CHECK_3_LESS_0,
        INCREMENT_TENT_3_LEN,
        DECREMENT_TENT_3_LEN,
        SET_TENT_3_EX_4,
        SET_TENT_3_EX_0,
        CHECK_TENT_4_LEN_0,
        CHECK_4_LESS_0,
        INCREMENT_TENT_4_LEN,
        DECREMENT_TENT_4_LEN,
        SET_TENT_4_EX_4,
        SET_TENT_4_EX_0,    
        END_CYCLE_1,
        END_CYCLE_2,
        GAMEOVER
        };
  }

  always {
        asel = 0;
        bsel = 0;
        alufn = 0;
        prng = 0;
        wsel = 0;
        we = 0;
        ra = 0;
        rb = 0;
        wr = 0;
        debu = debug.q;
        
    if (rst) {
      game_fsm.d = game_fsm.IDLE;
    }
    else {
      case (game_fsm.q) {
        game_fsm.IDLE:
          prng = b0;
          we = b0;
          if (left == 1) {
            game_fsm.d = game_fsm.CHECK_PC_POS_0;
          } else if (right == 1) {
            game_fsm.d = game_fsm.CHECK_PC_POS_4;
          }
          
        game_fsm.CHECK_PC_POS_0:
          asel = b10;
          bsel = b00;
          wsel = b0;
          alufn = b110011;
          rb = b0001;
          we = b1;
          wr = b1111;
          prng = b1;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_L_1;

        game_fsm.CHECK_PC_POS_4:
          asel = b00;
          bsel = b10;
          wsel = b0;
          alufn = b110011;
          ra = b0001;
          we = b1;
          wr = b1111;
          prng = b1;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_R_1;
          
        game_fsm.BRANCH_CMP_REGISTER_L_1:
          rb = b1111;
          we = b0;
          prng = b0;
          if(b_data == 1){
            game_fsm.d = game_fsm.IDLE;
          } else if (b_data == 0){
            game_fsm.d = game_fsm.CHECK_PC_POS_LESS_4_L;
          }
        
        game_fsm.CHECK_PC_POS_LESS_4_L:
          asel = b00;
          bsel = b10;
          wsel = b0;
          alufn = b110101;
          ra = b0001;
          we = b1;
          wr = b1111;
          prng = b0;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_L_2;

        game_fsm.BRANCH_CMP_REGISTER_L_2:
          rb = b1111;
          we = b0;
          prng = b0;
          if(b_data == 1){
            game_fsm.d = game_fsm.DECREMENT_PC_POS;
          } else if (b_data == 0){
            game_fsm.d = game_fsm.INCREMENT_PC_POS;
          }

        game_fsm.BRANCH_CMP_REGISTER_R_1:
          rb = b1111;
          we = b0;
          prng = b0;
          if(b_data == 1){
            game_fsm.d = game_fsm.IDLE;
          } else if (b_data == 0){
            game_fsm.d = game_fsm.CHECK_PC_POS_LESS_4_R;
          }
        
        game_fsm.CHECK_PC_POS_LESS_4_R:
          asel = b00;
          bsel = b10;
          wsel = b0;
          alufn = b110101;
          ra = b0001;
          we = b1;
          wr = b1111;
          prng = b0;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_R_2;
        
        game_fsm.BRANCH_CMP_REGISTER_R_2:
          rb = b1111;
          we = b0;
          prng = b0;
          if(b_data == 1){
            game_fsm.d = game_fsm.INCREMENT_PC_POS;
          } else if (b_data == 0){
            game_fsm.d = game_fsm.DECREMENT_PC_POS;
          }

        game_fsm.DECREMENT_PC_POS:
          asel = b00;
          bsel = b01;
          wsel = b0;
          alufn = b000001;
          ra = b0001;
          we = b1;
          wr = b0001;
          prng = b1;
          game_fsm.d = game_fsm.IDLE;

        game_fsm.INCREMENT_PC_POS:
          asel = b00;
          bsel = b01;
          wsel = b0;
          alufn = b000000;
          ra = b0001;
          we = b1;
          wr = b0001;
          prng = b0;
          game_fsm.d = game_fsm.CHECK_PC_POS_8;
        
        game_fsm.CHECK_PC_POS_8:
          asel = b00;
          bsel = b11;
          wsel = b0;
          alufn = b110011;
          ra = b0001;
          we = b1;
          wr = b1111;
          prng = b0;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_R_3;
        
        game_fsm.BRANCH_CMP_REGISTER_R_3:
          rb = b1111;
          we = b0;
          prng = b0;
          if(b_data == 1){
            game_fsm.d = game_fsm.INCREMENT_SCORE;
          } else if(b_data == 0){
            game_fsm.d = game_fsm.IDLE;
          }

        // check if the player has won
          
        game_fsm.INCREMENT_SCORE:
          asel = b00;
          bsel = b01;
          wsel = b0;
          alufn = b000000;
          ra = b0000;
          we = b1;
          wr = b0000;
          prng = b0;
          game_fsm.d = game_fsm.CHECK_SCORE_8;
        
        game_fsm.CHECK_SCORE_8:
          asel = b00;
          bsel = b11;
          wsel = b0;
          alufn = b110011;
          ra = b0000;
          we = b1;
          wr = b1111;
          prng = b1;
          game_fsm.d = game_fsm.BRANCH_CMP_REGISTER_INCREMENT;
        
        game_fsm.BRANCH_CMP_REGISTER_INCREMENT:
          rb = b1111;
          we = b0;
          prng = b0;
          if (b_data == 1) {
            game_fsm.d = game_fsm.GAMEOVER;
          } else {
            game_fsm.d = game_fsm.SET_PC_POS;
          }
        
        game_fsm.SET_PC_POS:
          asel = b10;
          wsel = b0;
          alufn = b011010;
          we = b1;
          wr = b0001;
          prng = b1;
          game_fsm.d = game_fsm.IDLE;

        game_fsm.GAMEOVER:
          asel = b00;
          wsel = b0;
          alufn = b011010;
          ra = b1011;
          we = b1;
          wr = b0001;
          prng = b0;
          game_fsm.d = game_fsm.END_CYCLE_1;
        
        game_fsm.END_CYCLE_1:
          asel = b00;
          wsel = b0;
          alufn = b011010;
          ra = b1011;
          we = b1;
          wr = b0001;
          prng = b1;
          debug.d = 3;
          if (tick) {
            game_fsm.d = game_fsm.END_CYCLE_2;
          }
        
        game_fsm.END_CYCLE_2:
          asel = b11;
          wsel = b0;
          alufn = b011010;
          we = b1;
          wr = b0001;
          prng = b0;
          if (tick) {
            game_fsm.d = game_fsm.END_CYCLE_1;
          }

  }
}
