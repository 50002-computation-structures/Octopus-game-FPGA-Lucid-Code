module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    // output io_led [3][8],   // LEDs on IO Shield
    // output io_seg [8],      // 7-segment LEDs on IO Shield
    // output io_sel [4],      // Digit select on IO Shield
    // input io_button [5],    // 5 buttons on IO Shield
    // input io_dip [3][8],    // DIP switches on IO Shield
    
    // game display outputs and external inputs (see gameio.acf)
    output score_ones[8],
    output score_tens[8],
    output pc_disp[5],
    output tent_1[4],
    output tent_2[4],
    output tent_3[4],
    output tent_4[4],
    
    input reset,
    input left,
    input right
  )

{
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // pipelines handle external input to reduce likelihood of metastability
    button_conditioner left_con;
    button_conditioner right_con;
    
    .rst(rst) {      
      octopus_processor processor;
    }
  }
  
  diver_decoder diver_decoder;
  tentacle_decoder tent_dec_1;
  tentacle_decoder tent_dec_2;
  tentacle_decoder tent_dec_3;
  tentacle_decoder tent_dec_4;
  score_decoder score_decoder;
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    // led = c{3b0, io_button};  // connect buttons to LEDs
    led = 0;
    
    usb_tx = usb_rx;          // loop serial port
    
    // io_seg = ~seg.seg; // connect segments to the driver
    // io_sel = ~seg.sel; // connect digit select to the driver
    
    // io_led = io_dip;   // connect the DIP switches to the LEDs
    
    // game processor connections
    left_con.in = left;
    // left_pipe.in = io_button[3];
    right_con.in = right;
    // right_pipe.in = io_button[4];
    processor.left = left_con.out;
    processor.right = right_con.out;
    processor.reset = reset;
    
    // processor outputs
    score_decoder.score = processor.score;
    score_ones = ~score_decoder.ones;
    score_tens = ~score_decoder.tens;
    
    diver_decoder.pc_pos = processor.pc_pos; // diver decoder since a physical decoder will give me a stroke
    pc_disp = diver_decoder.pc_display;
    
    tent_dec_1.tent_len = processor.tent_1_len; // tentacle length decoders are physical
    tent_dec_2.tent_len = processor.tent_2_len;
    tent_dec_3.tent_len = processor.tent_3_len;
    tent_dec_4.tent_len = processor.tent_4_len;
    
    tent_1 = tent_dec_1.tent_dec;
    tent_2 = tent_dec_2.tent_dec;
    tent_3 = tent_dec_3.tent_dec;
    tent_4 = tent_dec_4.tent_dec;
    
    // just in case everything is truly gone case on presentation day, uncomment these and the io_led signals above
    
    // io_led[0][3:0] = tent_dec_1.tent_dec;
    // io_led[0][7:4] = tent_dec_2.tent_dec;
    // io_led[1][3:0] = tent_dec_3.tent_dec;
    // io_led[1][7:4] = tent_dec_4.tent_dec;
    
    // io_led[2] = diver_decoder.pc_display;
  }
}