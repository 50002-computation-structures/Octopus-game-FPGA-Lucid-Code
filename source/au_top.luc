module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    
    // game display outputs and external inputs (see gameio.acf)
    output score[4],
    output pc_disp[5],
    output tent_1[3],
    output tent_2[3],
    output tent_3[3],
    output tent_4[3],
    
    input left,
    input right
  )

{
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_detector (#RISE(1), #FALL(0));
    // pipelines handle external input to reduce likelihood of metastability
    pipeline left_pipe(#DEPTH(2));
    pipeline right_pipe(#DEPTH(2));
    
    .rst(rst) {
      multi_seven_seg seg;
      multi_dec_ctr dec_ctr;
      counter ctr (#SIZE(1), #DIV(24));
      
      octopus_processor processor;
    }
  }
  
  diver_decoder diver_decoder;
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    
    usb_tx = usb_rx;          // loop serial port
    
    edge_detector.in = ctr.value;
    dec_ctr.inc = edge_detector.out;
    seg.values = dec_ctr.digits;
    
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    io_led = io_dip;   // connect the DIP switches to the LEDs
    
    // game processor connections
    left_pipe.in = left;
    left_pipe.in = io_button[3];
    right_pipe.in = right;
    right_pipe.in = io_button[4];
    processor.left = left_pipe.out;
    processor.right = right_pipe.out;
    
    // processor outputs
    score = processor.score;
    diver_decoder.pc_pos = processor.pc_pos; // diver decoder since a physical decoder will give me a stroke
    pc_disp = diver_decoder.pc_display;
    tent_1 = processor.tent_1_len; // tentacle length decoders are physical
    tent_2 = processor.tent_2_len;
    tent_3 = processor.tent_3_len;
    tent_4 = processor.tent_4_len;
    
    io_led[2] = diver_decoder.pc_display;
    io_led[1] = processor.rng;
    io_led[0] = processor.score;
    led[1:0] = processor.other;
    
    // io debug
    //case (io_dip[0]) {
    //  0 : io_led[0] = processor.deb_wsel[7:0];
    //      io_led[1] = processor.deb_wsel[15:8];
    //  1 : io_led[0] = processor.deb_asel[7:0];
    //      io_led[1] = processor.deb_asel[15:8];
    //  2 : io_led[0] = processor.deb_bsel[7:0];
    //      io_led[1] = processor.deb_bsel[15:8];
    //  3 : io_led[0] = processor.deb_alu[7:0];
    //      io_led[1] = processor.deb_alu[15:8];
    //  4 : io_led[0] = processor.tent_1_len[7:0];
    //      io_led[1] = processor.tent_1_len[15:8];
    //  5 : io_led[0] = processor.tent_2_len[7:0];
    //      io_led[1] = processor.tent_2_len[15:8];
    //  6 : io_led[0] = processor.tent_3_len[7:0];
    //      io_led[1] = processor.tent_3_len[15:8];
    //  7 : io_led[0] = processor.tent_4_len[7:0];
    //      io_led[1] = processor.tent_4_len[15:8];
    //  default :
    //    io_led[0] = processor.deb_wsel[7:0];
    //    io_led[1] = processor.deb_wsel[15:8];
    //}
  }
}